import React from 'react';
import { Link } from 'react-router-dom';
import { connect } from 'react-redux';
// connect is a higher order component (HOC) that lets us modify our component to have access to things related to redux
// HOC are functions that take components as arguments and return a new 'super powered' component

import { auth } from '../../firebase/firebase.utils';
import CartIcon from '../cart-icon/cart-icon.component';
import CartDropDown from '../cart-dropdown/cart-dropdown.component';

import { ReactComponent as Logo } from '../../assets/crown.svg';
// ReactComponent as Logo is a special syntax in React for importing SVG.

import './header.styles.scss';
import CartDropdown from '../cart-dropdown/cart-dropdown.component';

// destructure currentUser and hidden from this.props
const Header = ({ currentUser, hidden }) => (
 <div className='header'>
   <Link className='logo-container' to='/'>
    <Logo className='logo'/>
   </Link>
   <div className='options'>
    <Link className='option' to='/shop'>SHOP</Link>
    <Link className='option' to='/shop'>CONTACT</Link>
    {
      // If currentUser is an object then we will render a <div> - true
      // If false is returned - currentUser is not an object (i.e. null) - renders a <Link>
      currentUser ?
      (<div className='option' onClick={() => auth.signOut()}>SIGN OUT</div>) : (<Link className='option' to='/signin'>SIGN IN</Link>)
    }
    <CartIcon/>
   </div>
   {hidden ? null : <CartDropdown/>
  //  If the hidden value is true then we want to render nothing. If it is false we want to render our CartDropdown component
   }
 </div>
);

// Function that allows us to access the state (Root Reducer) - Root Reducer is an object that has a property of user whose value points to our user reducer
// Currently this user reducer object is set to our initial state (currentUser: null) - haven't triggered any actions to update this value

const mapStateToProps = ({user: { currentUser }, cart: { hidden }}) => ({
  // Destructuring syntax for nested values
  // While you can give the argument any name you want, calling it store would be incorrect - it's the 'state value', not the 'store instance'
  currentUser,
  hidden
  // Our header component now has access to both currentUser and hidden (and their respective values) as props
});

export default connect(mapStateToProps)(Header);
// As the first argument passed in to connect, mapStateToProps is used for selecting the part of the data from the store that the connected component needs. It's frequently referred to as just mapState for short.
// It is called every time the store state changes.
// It receives the entire store state, and should return an object of data this component needs.
// mapStateToProps should be defined as a function:
// function mapStateToProps(state, ownProps?)

// It should take a first argument called state, optionally a second argument called ownProps, and return a plain object containing the data that the connected component needs.

// This function should be passed as the first argument to connect, and will be called every time when the Redux store state changes. If you do not wish to subscribe to the store, pass null or undefined to connect in place of mapStateToProps.

// The first argument to a mapStateToProps function is the entire Redux store state (the same value returned by a call to store.getState()). Because of this, the first argument is traditionally just called state.

// You may define the function with a second argument, ownProps, if your component needs the data from its own props to retrieve data from the store. This argument will contain all of the props given to the wrapper component that was generated by connect. You do not need to include values from ownProps in the object returned from mapStateToProps. connect will automatically merge those different prop sources into a final set of props.

// Your mapStateToProps function should return a plain object that contains the data the component needs:
// Each field in the object will become a prop for your actual component.
// The values in the fields will be used to determine if your component needs to re-render.

// Use Link to set up navigation link back to our homepage when the user clicks on the logo (SVG format - Scalable Vector Graphics - small, performant and look the same regardless of image dimensions)
// The ReactComponent import name is special and tells Create React App that you want a React component that renders an SVG, rather than its filename
// Every time state changes - related components get re-rendered (unidirectional data flow down tree) - important to get state location right - sign-in and register components will both have their own state - don't really care what the state is for each other

// Destructure currentUser prop that we pass into our Header component from our App component